version: '3.4'
services:
  database:
    image: "postgres:15.3"
    # restart: unless-stopped
    environment:
      - POSTGRES_PASSWORD=${DATABASE_POSTGRES_PASSWORD} # for the docker, in the code standard naming "DATABASE_*"
    ports:
      - "${DATABASE_PORT}:${DATABASE_PORT}"
    volumes:
      - ${DATABASE_DATA}:/var/lib/postgresql/data # The database. This will increase in size with time. !!! DON'T COMMIT !!!
      - ${DATABASE_CONFIG}:/etc/postgresql/ # The config files. !!! DON'T COMMIT !!!
    command: postgres -c config_file=/etc/postgresql/postgres.conf

  weaviate:
    command:
      - --host
      - 0.0.0.0
      - --port
      - '${WEAVIATE_PORT}'
      - --scheme
      - http
    image: semitechnologies/weaviate:latest
    # restart: unless-stopped
    ports:
     - "${WEAVIATE_PORT}:8080"
    environment:
      PROMETHEUS_MONITORING_ENABLED: 'true'
      QUERY_DEFAULTS_LIMIT: 20
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: 'true'
      PERSISTENCE_DATA_PATH: ${WEAVIATE_PERSISTENCE_PATH}
      DEFAULT_VECTORIZER_MODULE: text2vec-transformers
      ENABLE_MODULES: text2vec-transformers
      TRANSFORMERS_INFERENCE_API: http://t2v-transformers:8080
      CLUSTER_HOSTNAME: 'node1'
    volumes:
      - ${WEAVIATE_DATA_VOLUME_PATH}:${WEAVIATE_PERSISTENCE_PATH}
    depends_on:
      - t2v-transformers
      - prometheus
      - grafana

  t2v-transformers:
    image: semitechnologies/transformers-inference:sentence-transformers-paraphrase-multilingual-MiniLM-L12-v2
    # restart: unless-stopped
    environment:
      ENABLE_CUDA: 0
      # NVIDIA_VISIBLE_DEVICES: all # enable if running with CUDA

  prometheus:
    image: prom/prometheus:v2.36.2
    volumes:
      - ../config/vector_database/prometheus:/etc/prometheus/ # configs
      - ../data/vector_database/data/prometheus:/prometheus # data
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - 9090:9090

  grafana:
    image: grafana/grafana-oss
    ports:
      - 3000:3000
    volumes:
      - ../config/vector_database/grafana/grafana.ini:/etc/grafana/grafana.ini
      - ../config/vector_database/grafana/datasource.yml:/etc/grafana/provisioning/datasources/prometheus.yml
      - ../config/vector_database/grafana/dashboard_provider.yml:/etc/grafana/provisioning/dashboards/dashboards.yml
      - ../config/vector_database/grafana/dashboards:/var/lib/grafana/dashboards

  # TODO The dockerfile builds and the container/app is launchable. I didn't try
  # to run it with docker-compose. Checks that it works after you have loaded the
  # relevant volumes.
  # TODO Check if you can move .dockerignore and docker-compose.yaml under docker/.
  # The images by itself builds like this: docker build --tag yaserviceru -f docker/Dockerfile .
#  yaserviceru:
#    build:
#      context: ..
#      dockerfile: Dockerfile
#    restart: unless-stopped
#    ports:
#      - "${APP_PORT}:80"
#    volumes:
#      - ${APP_LOGS}:/app/${APP_LOGS}
#      - ${APP_PERSISTENCE}:/app/${APP_PERSISTENCE}
#    depends_on:
#      - database
#      - weaviate
#      - t2v-transformers